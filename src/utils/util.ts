/**
 *
 * @param newVal indx that need to be check
 * @param totalVal total allow values
 * @returns value by capping it to the allow values
 */
export const capIndx = (newVal: number, totalVal: number): number => {
	if (newVal < 0) return 0;
	else if (newVal >= totalVal) return totalVal - 1;
	else return newVal;
};

/**
 *
 * @returns Return a random UUID string
 *
 * In non-secure context, a weak UUID will be return generated by Math.random()
 */
export const getUUID = (): string => {
	const charSet: string[] = Array.from({ length: 10 }, (_, i) => `${i}`).concat(
		Array.from({ length: 6 }, (_, i) =>
			String.fromCharCode(i + "a".charCodeAt(0)),
		),
	);
	if (window.crypto && window.crypto.randomUUID) {
		return window.crypto.randomUUID();
	} else {
		const UUIDPatrn = `${"x".repeat(8)}-${"x".repeat(4)}-${"x".repeat(
			4,
		)}-${"x".repeat(4)}-${"x".repeat(12)}`;
		return UUIDPatrn.split("")
			.map((d) =>
				d !== "-" ? charSet[Math.floor(Math.random() * charSet.length)] : "-",
			)
			.join("");
	}
};

export const isAccptImg = (type: string): boolean => {
	// TODO: check type follow pattern: image/*
	return /image\/.*/.test(type);
};

// TODO: Move FileDropFileSrc, FileInputFileSrc, filterImgFiles here
